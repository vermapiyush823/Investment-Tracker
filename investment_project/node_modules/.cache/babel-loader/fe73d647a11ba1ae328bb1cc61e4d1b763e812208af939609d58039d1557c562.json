{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\VS Code\\\\01-starting-project\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Header from './components/Header/Header';\nimport Userinput from './components/UserInput/UserInput';\nimport ResultTable from './components/ResultsTable/ResultsTable';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    setUserInput(userInput);\n\n    // do something with yearlyData ...\n  };\n\n  if (userInput) {\n    const yearlyData = []; // per-year results\n\n    let currentSavings = userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = userInput['expected-return'] / 100;\n    const duration = userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Userinput, {\n      onCalulate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fCXvCeCdp/eInhYAy188SZ+/4/8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Header","Userinput","ResultTable","useState","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalulate","_c","$RefreshReg$"],"sources":["D:/Study/VS Code/01-starting-project/src/App.jsx"],"sourcesContent":["import React from 'react';\nimport Header from './components/Header/Header'\nimport Userinput from './components/UserInput/UserInput';\nimport ResultTable from './components/ResultsTable/ResultsTable';\nimport { useState } from 'react';\nfunction App() {\n  const [userInput,setUserInput] = useState(null);\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    setUserInput(userInput);\n\n    // do something with yearlyData ...\n  };\n  if(userInput){\n  const yearlyData = []; // per-year results\n\n    let currentSavings = userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = userInput['expected-return'] / 100;\n    const duration = userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n  }\n  return (\n    <div>\n      <Header />\n      <Userinput onCalulate={calculateHandler}/>\n      <ResultTable/>\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n     \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAOC,WAAW,MAAM,wCAAwC;AAChE,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC/C,MAAMO,gBAAgB,GAAIF,SAAS,IAAK;IACtC;IACA;;IAEAC,YAAY,CAACD,SAAS,CAAC;;IAEvB;EACF,CAAC;;EACD,IAAGA,SAAS,EAAC;IACb,MAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;;IAErB,IAAIC,cAAc,GAAGJ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACnD,MAAMK,kBAAkB,GAAGL,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC7D,MAAMM,cAAc,GAAGN,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IACzD,MAAMO,QAAQ,GAAGP,SAAS,CAAC,UAAU,CAAC;;IAEtC;IACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;EACF;EACA,oBACER,OAAA;IAAAgB,QAAA,gBACEhB,OAAA,CAACL,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVpB,OAAA,CAACJ,SAAS;MAACyB,UAAU,EAAEhB;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC1CpB,OAAA,CAACH,WAAW;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAMX,CAAC;AAEV;AAAClB,EAAA,CA3CQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}